<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="../../../testing/xspec-assurance.sch"?>
<x:description xmlns:mx="http://csrc.nist.gov/ns/csd/metaschema-xslt"
    xmlns:mv="http://csrc.nist.gov/ns/csd/metaschema-xslt"
    xmlns="http://example.com/ns/computer"
    xmlns:x="http://www.jenitennison.com/xslt/xspec" xmlns:xs="http://www.w3.org/2001/XMLSchema"
    stylesheet="current/computer_inspector.xsl" xslt-version="3.0">

    <!-- This XSpec does two things:
    
    1. Smoke testing at top level - is everything in place?
    2. Demonstrating and documenting patterns we can follow including
         inline and out of line examples
         comparing results after post-processing with cleaner/normalizer (maintained in helper XSLT)
         testing results directly vs using the helper function
         
    Keep in mind that everything in a testing XSLT runs under mode "validate"
    to copy itself, test and descend, and mode "test" to test and generate (test) results
    
    the result being an annotated copy of the input
    
    -->

    <x:helper stylesheet="../mx-reporter.xsl"/>
    
    <x:scenario label="A simple but valid document (element) copies through">
        <x:variable name="valid-file" select="document('../valid/valid1.xml')"/>
        <x:scenario label="A 'computer' document">
            <!--  selecting '/' passes the root of the tree in as wanted, instead of the element alone. -->
            <x:context select="/">
                <computer id="abc"/>
            </x:context>
            <x:expect label="comes through as a copy with a 'validation' wrapper">
                <mx:validation src="...">
                  <computer id="abc"/>
                </mx:validation>
            </x:expect>
        </x:scenario>
        <x:scenario label="A 'computer' document in 'validate' mode">
            <x:context mode="validate">
                <computer id="abc"/>
            </x:context>
            <x:expect label="remains a computer, keeping @id">
                <computer id="abc"/>
            </x:expect>
        </x:scenario>
        <x:scenario label="A valid file instance in no mode">
            <x:context href="valid/valid1.xml"/>
            <x:expect label="shows it has been validated" test="exists($x:result/self::mx:validation)"/>
        </x:scenario>
        <x:scenario label="A valid file instance in no mode">
            <x:context href="valid/valid1.xml"/>
            <x:expect label="brings its copy with its validation" test="deep-equal($x:result/self::mx:validation/child::*,$valid-file/child::*)"/>
        </x:scenario>
        <x:scenario label="A valid instance in 'validate' mode">
            <x:context mode="validate" href="valid/valid1.xml"/>
            <!-- https://github.com/xspec/xspec/wiki/Writing-Scenarios#describing-an-xsboolean-xpath-expression -->
            <x:expect label="comes through as a copy of itself" test="deep-equal($x:result,$valid-file)"/>
        </x:scenario>
    </x:scenario>

    <x:scenario label="Haphazard unknown inputs are intercepted and reported">
        <x:scenario label="An unknown element">
            <x:context mode="validate"><e/></x:context>
            <x:expect label="is marked as unexpected">
                <e>
                    <mx:report test="exists(.)" cat="unmatched" xpath="/e"
                        cf="...">Unrecognized element <mx:gi>e</mx:gi>.</mx:report>
                </e>
            </x:expect>
        </x:scenario>
        <x:scenario label="An unknown attribute on a known element">
            <x:context mode="validate"><computer id="c" nope="x"/></x:context>
            <x:expect label="is also marked as unexpected">
                <computer id="c" nope="x">
                    <mx:report test="exists(.)" cat="unmatched attribute" xpath="/computer/@nope" 
                        cf="...">Unrecognized attribute <mx:gi>@nope</mx:gi> on element <mx:gi>computer</mx:gi> .</mx:report>
                </computer>
            </x:expect>
        </x:scenario>
    </x:scenario>

    <x:scenario label="Comments are copied and PIs are dropped">
        <x:scenario label="Comment">
            <x:variable name="mv:a-comment"><!--comment--></x:variable>
            <x:context select="$mv:a-comment" mode="validate"/>
            <x:expect label="is copied" select="$mv:a-comment"/>
        </x:scenario>
        <x:scenario label="Processing instruction">
            <x:context mode="validate"><?pi type="sample" href="file.css"?></x:context>
            <x:expect label="is dropped" select="()"/>
        </x:scenario>
    </x:scenario>


    <!-- Pattern: apply the validation logic, then extract only its mx parts to compare -->
    <x:scenario label="A cleaning-up post-process returns only the reports, not a copy">
        <x:scenario label="For an unknown element">
            <x:context mode="validate"><nil/></x:context>
            <x:expect label="we see a single error report marking it as unexpected" test="mx:pull-reports($x:result)">
                <mx:report test="exists(.)" cat="unmatched" xpath="/nil"
                    cf="...">Unrecognized element <mx:gi>nil</mx:gi>.</mx:report>
            </x:expect>
        </x:scenario>
    </x:scenario>

    <x:scenario label="Both inline and externally stored instances can be loaded and checked">
        <x:scenario label="A valid file">
            <x:context href="valid/valid1.xml" mode="validate"/>
            <x:expect label="gets no reports" test="empty($x:result//mx:report)"/>
        </x:scenario>
        <x:scenario label="Given as a literal, an invalid instance">
            <x:context mode="validate">
                <computer xmlns="http://example.com/ns/computer" id="id1">
                    <motherboard>
                        <vendor id="id3">
                            <name>name0</name>
                            <address>address0</address>
                            <website>http://pages.nist.gov/metaschema</website>
                        </vendor>
                        <!-- 'type' and 'memory' are both missing -->
                    </motherboard>
                </computer>
            </x:context>
            <x:expect label="produces at least one report" test="exists($x:result//mx:report)"/>
        </x:scenario>
        <x:scenario label="An invalid file on the file system">
            <x:context href="invalid/invalid1.xml" mode="validate"/>
            <x:expect label="likewise produces at least one report" test="exists($x:result//mx:report)"/>
        </x:scenario>
    </x:scenario>

</x:description>
