<?xml version="1.0" encoding="UTF-8"?>
<x:description
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    
    xmlns:m="http://csrc.nist.gov/ns/oscal/metaschema/1.0"
    xmlns:x="http://www.jenitennison.com/xslt/xspec"
    xmlns:XSLT="http://www.w3.org/1999/XSL/Transform"
    stylesheet="../../../alpha2/generate-inspector-xslt.xsl" run-as="external"
    xslt-version="3.0">

    <!-- This XSpec is for validating the production of an Inspector XSLT from a (composed) metaschema. -->
    
    <!-- Unlike other XSpecs in this directory, the *functionality* of the produced Inspector XSLT is not tested. -->
    
    <!-- Planned: this XSpec can be used not only to test and validate
        the transformation 'compiling' a metaschema into a set of tests
     but also to codify how those tests are represented
        (especially constraints testing!)
        codify useful rules regarding XSLT completeness, organization, docs / QA checks

   -->
    <!--<x:variable name="source-namespace" select="'http://csrc.nist.gov/ns/oscal/1.0'"/>
    <x:variable name="source-prefix" select="'oscal-profile'"/>-->

   <!-- .     .     .     .     .     .     .     .     .     .     .     .     .     .     . -->
   
   <x:scenario label="Top-level transformation setup">
      <x:scenario label="Basic inline">
         <x:context>
            <METASCHEMA xmlns="http://csrc.nist.gov/ns/oscal/metaschema/1.0">
               <schema-name>Computer Model</schema-name>
               <schema-version>0.0.5</schema-version>
               <short-name>computer</short-name>
               <namespace>http://example.com/ns/computer</namespace>
               <json-base-uri>http://example.com/ns/computer</json-base-uri>
            </METASCHEMA>
         </x:context>
         <x:expect label="XSLT transform element with correct attributes">
            <xsl:transform version="3.0" xpath-default-namespace="http://example.com/ns/computer"
               exclude-result-prefixes="#all">...</xsl:transform>
         </x:expect>
      </x:scenario>

      <x:scenario label="Basic external - Computer metaschema">
         <x:context href="../../computer_metaschema.xml"/>
         <!-- XXX why does this one work while Tiny requires the composition? -->
         <x:expect label="XSLT transform element with correct attributes">
            <xsl:transform version="3.0" xpath-default-namespace="http://example.com/ns/computer"
               exclude-result-prefixes="#all">...</xsl:transform>
         </x:expect>
      </x:scenario>
      <x:scenario label="Basic external - Tiny metaschema">
         <x:context href="../../current/tiny_metaschema_COMPOSED-metaschema.xml"/>
         <x:expect label="XSLT transform element with correct attributes">
            <xsl:transform version="3.0" xpath-default-namespace="http://example.com/ns/tinydata"
               exclude-result-prefixes="#all">...</xsl:transform>
         </x:expect>
      </x:scenario>

      <x:scenario label="Current generation matches target in tiny_inspector-working.xsl" pending="integration">
         <x:context href="current/tiny_metaschema_COMPOSED-metaschema.xml"/>
         <x:expect label="XSLT transform element with correct attributes" href="tiny_inspector-working.xsl"/>
      </x:scenario>

   </x:scenario>
</x:description>
