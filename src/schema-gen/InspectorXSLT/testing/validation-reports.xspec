<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="../../../testing/xspec-assurance.sch"?>
<x:description xmlns:mx="http://csrc.nist.gov/ns/csd/metaschema-xslt"
    xmlns:mv="http://csrc.nist.gov/ns/csd/metaschema-xslt" xmlns="http://example.com/ns/computer"
    xmlns:c="http://example.com/ns/computer" xmlns:x="http://www.jenitennison.com/xslt/xspec"
    xmlns:xs="http://www.w3.org/2001/XMLSchema" stylesheet="current/computer_inspector.xsl"
    xslt-version="3.0">

    <!-- COME BACK TO / HELP WANTED
    See STRESS TESTING below
    Test cardinality, order and 'choice' more systematically and comprehensively
    Unit tests for post-processing modes - MX, HTML and Markdown production?
    -->
    
    <!-- XXX next: Test datatypes, markup-line and markup-multiline (refer to XSD to scope) -->
    
    <!-- XXX implement 'target' xpath that tests only indicated nodes (eval())? -->
    <!-- XXX 'show-only' permits filtering error codes w/ regex? -->
    <!-- XXX mode=noisy writes messages out ... add'l to writing files ... -->
   
    <!-- keep-quiet='details', 'when-valid' 'warnings'; particular warnings by constraint ID  -->
  
   <!--
     
  STRESS TESTING -
    markup-line and markup-multiline fields
    edge cases with @in-xml 'unwrapped' etc.
    survey Metaschema and OSCAL for interesting cases
  -->
  
<!--

modes of operation
  want outputs for invalid files only? use mode=silent-if-valid
  want summary lines only (i.e. drop details) mode=concise
  want extra noise (for when writing to files) mode=noisy
  o want compressed markdown? (mode=compress)
  presentational options
    HTML, MD, concise (compressed, no extra new lines, one line per report)
  suppress=warnings
  suppress="warning WARNING INFO AAAA BBBB xpath=/a/b/c xpath=/a/d/e"

CSS to enhance for error levels

   -->
   
    <!-- TEST apply-validator.xsl as a 'null schema' validator -->
    <!-- more modes? - concise, grouped, summary-only, silent-if-valid?  -->
    <!-- XXX then: implementing the constraints checking!  -->
    
   <!-- to assess coverage wrt current/computer_inspector.xsl:
          /descendant::XSLT:call-template[@name='notice']   -->
   
    <x:scenario label="'EOOP element-out-of-place' notices">
        <x:scenario label="For a known but incorrect element at the root (document level)">
            <x:context mode="test" select="/c:motherboard">
                <motherboard/>
            </x:context>
            <x:expect label="an error is reported">
                <mx:report cf="..." test="exists(.)" xpath="/motherboard" class="EOOP element-out-of-place">
                    <mx:gi>motherboard</mx:gi> is not permitted here.</mx:report>
            </x:expect>
        </x:scenario>
        <x:scenario label="For an element with a known name, but out of place">
            <x:context mode="test" select="/c:computer/c:computer">
                <computer id="0000">
                    <computer/>
                </computer>
            </x:context>
            <x:expect label="an error is reported">
                <mx:report cf="..." test="exists(.)" xpath="/computer/computer" class="EOOP element-out-of-place">
                    <mx:gi>computer</mx:gi> is not permitted here.</mx:report>
            </x:expect>
        </x:scenario>
    </x:scenario>
    
    <x:scenario label="'AOOP attribute-out-of-place' notices">
        <x:scenario label="For an attribute with a known name, but out of place">
            <x:context mode="test" select="/c:computer">
                <computer illuminated="true" id="0000"/>
            </x:context>
            <x:expect label="an error is reported">
                <mx:report cf="..." test="exists(.)"
                    xpath="/computer/@illuminated" class="AOOP attribute-out-of-place">
                    <mx:gi>@illuminated</mx:gi> is not permitted here.</mx:report>
            </x:expect>
        </x:scenario>
    </x:scenario>
    
    <x:scenario label="'VDSX violates-datatype-syntax' notices">
        <x:context mode="test" select="/c:computer/c:motherboard/c:cooling/c:water/@illuminated">
            <computer id="0000">
                <motherboard>
                    <cooling>
                        <water illuminated="truE"/>
                    </cooling>
                </motherboard>
            </computer>
        </x:context>
        <x:expect label="an error is reported">
            <mx:report cf="..." test="not(string(.) castable as xs:boolean and matches(.,'^true|1|false|0$'))" class="VDSX violates-datatype-syntax"
                xpath="/computer/motherboard/cooling/water/@illuminated">
               <mx:gi>illuminated</mx:gi> <mx:code>truE</mx:code> does not conform to <mx:code>boolean</mx:code> datatype.</mx:report>
        </x:expect>
    </x:scenario>
    
    <x:scenario label="'EATI element-appears-too-infrequently' notices">
        <x:context mode="test" select="/c:computer/c:motherboard/c:cooling/c:fan">
            <computer id="0000">
                <motherboard>
                    <cooling>
                        <fan/>
                    </cooling>
                </motherboard>
            </computer>
        </x:context>
        <x:expect label="an error is reported">
            <mx:report cf="..."
                test="empty(following-sibling::fan) and (count(. | preceding-sibling::fan) lt 2)"
                xpath="/computer/motherboard/cooling/fan" class="EATI element-appears-too-infrequently">
                <mx:gi>fan</mx:gi> appears too few times: 2 minimum are required.</mx:report>
        </x:expect>
    </x:scenario>
    
    <x:scenario label="'EATO element-appears-too-often' notices">
        <x:scenario label="For an element appearing too many times">
            <x:context mode="test" select="/c:computer/c:motherboard[2]">
                <computer id="0000">
                    <motherboard/>
                    <motherboard>
                        <type/>
                        <memory/><!-- nb missing contents are not detected by matching 'motherboard' in mode 'test' -->
                    </motherboard>
                </computer>
            </x:context>
            <x:expect label="an error is reported">
                <mx:report cf="..." test="count(. | preceding-sibling::motherboard) gt 1" xpath="/computer/motherboard[2]" class="EATO element-appears-too-often">
                    <mx:gi>motherboard</mx:gi> appears too many times: 1 maximum is permitted.</mx:report>
            </x:expect>
        </x:scenario>
    </x:scenario>
    
    <x:scenario label="'VEXC violates-exclusive-choice' notices">
        <!-- TODO: implement sth with 'choice'       -->
        <!-- /descendant::XSLT:call-template[@name='notice'][6]       -->
        <x:context mode="test" select="/c:computer/c:motherboard/c:cooling/c:fan[1]">
            <computer id="0000">
                <motherboard>
                    <cooling>
                        <fan/>
                        <fan/>
                        <water/>
                    </cooling>
                </motherboard>
            </computer>
        </x:context>
        <x:expect label="an error is reported">
            <mx:report cf="..." test="empty(preceding-sibling::fan) and exists(../(water))" xpath="/computer/motherboard/cooling/fan[1]" class="VEXC violates-exclusive-choice">
                <mx:gi>fan</mx:gi> is unexpected along with <mx:gi>water</mx:gi>.</mx:report>
        </x:expect>
    </x:scenario>
    
   <x:scenario label="'EOOO element-out-of-order' notices">
      <!-- /descendant::XSLT:call-template[@name='notice'][7]       -->
      <x:scenario label="An element appearing after an optional successor">
         <x:context mode="test" select="/c:computer/c:motherboard/c:type">
            <computer id="0000">
               <motherboard>
                  <cooling/>
                  <type>custom</type>
               </motherboard>
            </computer>
         </x:context>
         <x:expect label="an error is reported">
            <mx:report cf="..." test="exists(preceding-sibling::cpu | preceding-sibling::ata-socket | preceding-sibling::memory | preceding-sibling::cooling | preceding-sibling::expansion-card)" xpath="/computer/motherboard/type" class="EOOO element-out-of-order">
               <mx:gi>type</mx:gi> is unexpected following <mx:gi>cpu</mx:gi>, <mx:gi>ata-socket</mx:gi>, <mx:gi>memory</mx:gi>, <mx:gi>cooling</mx:gi>, or <mx:gi>expansion-card</mx:gi>.</mx:report>
         </x:expect>
      </x:scenario>
      
   </x:scenario>
   
   <x:scenario label="'AVCV value-not-allowed' notices">
      <!-- /descendant::XSLT:call-template[@name='notice'][7]       -->
      <x:scenario label="A field with a value out of compliance with its enumeration - literally wrong">
         <x:context mode="test" select="/c:computer/c:motherboard/c:type">
            <computer id="0000">
               <motherboard>
                  <type>special</type>
               </motherboard>
            </computer>
         </x:context>
         <x:expect label="an error is reported">
            <mx:report cf="gix.572" test="not(.=('at','atx','mini-itx','custom'))" class="AVCV value-not-allowed"
               xpath="/computer/motherboard/type"><mx:code>special</mx:code> does not appear among permitted (enumerated) values for <mx:gi>type</mx:gi>: <mx:code>(at|atx|mini-itx|custom)</mx:code>.</mx:report>
         </x:expect>
      </x:scenario>
      <x:scenario label="An empty field whose value must be enumerated">
         <x:context mode="test" select="/c:computer/c:motherboard/c:type">
            <computer id="0000">
               <motherboard>
                  <type/>
               </motherboard>
            </computer>
         </x:context>
         <x:expect label="an error is reported, showing the empty string as '(empty)'">
            <mx:report cf="gix.572" test="not(.=('at','atx','mini-itx','custom'))" class="AVCV value-not-allowed"
               xpath="/computer/motherboard/type"><mx:code/> (empty) does not appear among permitted (enumerated) values for <mx:gi>type</mx:gi>: <mx:code>(at|atx|mini-itx|custom)</mx:code>.</mx:report>
         </x:expect>
      </x:scenario>
      <x:scenario label="A field with a value out of compliance with its enumeration - wrong CASE, so literally wrong">
         <x:context mode="test" select="/c:computer/c:motherboard/c:type">
            <computer id="0000">
               <motherboard>
                  <type>CUSTOM</type>
               </motherboard>
            </computer>
         </x:context>
         <x:expect label="an error is reported">
            <mx:report cf="gix.572" test="not(.=('at','atx','mini-itx','custom'))" class="AVCV value-not-allowed"
               xpath="/computer/motherboard/type"><mx:code>CUSTOM</mx:code> does not appear among permitted (enumerated) values for <mx:gi>type</mx:gi>: <mx:code>(at|atx|mini-itx|custom)</mx:code>.</mx:report>
         </x:expect>
      </x:scenario>
      <x:scenario label="A field with a value out of compliance with its enumeration - extra whitespace">
         <x:context mode="test" select="/c:computer/c:motherboard/c:type">
            <computer id="0000">
               <motherboard>
                  <type>   custom   </type>
               </motherboard>
            </computer>
         </x:context>
         <x:expect label="an error is reported">
            <mx:report cf="gix.572" test="not(.=('at','atx','mini-itx','custom'))" class="AVCV value-not-allowed"
               xpath="/computer/motherboard/type"><mx:code>   custom   </mx:code> does not appear among permitted (enumerated) values for <mx:gi>type</mx:gi>: <mx:code>(at|atx|mini-itx|custom)</mx:code>.</mx:report>
         </x:expect>
      </x:scenario>
      <x:scenario label="A field with a value in compliance with its enumeration">
         <x:context mode="test" select="/c:computer/c:motherboard/c:type">
            <computer id="0000">
               <motherboard>
                  <type>custom</type>
               </motherboard>
            </computer>
         </x:context>
         <x:expect label="throws no error" select="()"/>
      </x:scenario>
   </x:scenario>
   
   <!-- testing target="." constraints allowed-values, matches/@regex, matches/@datatype -->
   
    <x:scenario label="'MRQC missing-required-contents' notices">
        <!-- /descendant::XSLT:call-template[@name='notice'][8]       -->
        <!-- TODO: add some more here -->
        <x:context mode="test" select="/c:computer/c:motherboard/c:cooling">
            <computer id="0000">
                <motherboard>
                    <cooling/><!-- contains choice of (required) 'fan' or 'water' -->
                </motherboard>
            </computer>
        </x:context>
        <x:expect label="an error is reported">
            <mx:report  cf="..." test="empty(fan|water)"
                xpath="/computer/motherboard/cooling" class="MRQC missing-required-contents">
                <mx:gi>cooling</mx:gi> requires <mx:gi>fan|water</mx:gi>.</mx:report>
        </x:expect>
    </x:scenario>
    
    <x:scenario label="'MRQA missing-required-attribute' notices">
        <x:scenario label="For an attribute required but missing">
            <x:context mode="test" select="/c:computer">
                <computer/>
            </x:context>
            <x:expect label="an error is reported">
                <mx:report cf="..." test="empty(@id)"
                    xpath="/computer" class="MRQA missing-required-attribute">
                    <mx:gi>computer</mx:gi> requires <mx:gi>@id</mx:gi>.</mx:report>
            </x:expect>
        </x:scenario>
        <!-- /descendant::XSLT:call-template[@name='notice'][9]       -->
    </x:scenario>
    
    
    <!-- return list of descendants like this: /descendant::XSLT:call-template[@name='notice']/(position() || ': ' || XSLT:with-param[@name='cf']) => string-join('&#xA;')
    -->
    <x:scenario label="'UE unmatched-element' notices">
        <x:scenario label="For an unknown element at the root (document level)">
            <x:context mode="test" select="/c:motherboid">
                <motherboid/>
            </x:context>
            <x:expect label="an error is reported">
                <mx:report cf="..."
                    test="exists(.)"
                    xpath="/motherboid" class="_UE unmatched-element">Unrecognized element <mx:gi>motherboid</mx:gi>.</mx:report>
            </x:expect>
        </x:scenario>
        
    </x:scenario>   

    <x:scenario label="'UA unmatched-attribute' notices">
        <x:scenario label="For an unknown attribute">
            <x:context mode="test" select="/c:computer">
                <computer id="0000" networkID="hal"/>
            </x:context>
            <x:expect label="an error is reported">
                <mx:report cf="..." test="exists(.)"
                    xpath="/computer/@networkID" class="_UA unmatched-attribute">Unrecognized attribute <mx:gi>@networkID</mx:gi> on element <mx:gi>computer</mx:gi>.</mx:report>
            </x:expect>
        </x:scenario>
        <!-- /descendant::XSLT:call-template[@name='notice'][2]       -->
    </x:scenario>
    
    <x:scenario label="SANDBOX">
        
        <!-- /descendant::XSLT:call-template[@name='notice'][2]       -->
    </x:scenario>
    
</x:description>
