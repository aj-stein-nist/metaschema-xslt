<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="../../../testing/xspec-assurance.sch"?>
<x:description xmlns:mx="http://csrc.nist.gov/ns/csd/metaschema-xslt"
    xmlns="http://example.com/ns/computer"
    xmlns:x="http://www.jenitennison.com/xslt/xspec" xmlns:xs="http://www.w3.org/2001/XMLSchema"
    stylesheet="current/computer_inspector.xsl" xslt-version="3.0">

    <!-- Purpose: XSpec testing the validation of known-valid and known-invalid sets
     against 'computer' constraints defined by computer_metaschema.xml
     and implemented by the linked XSLT.
    
     These tests establish the correctness of determining 'valid' and 'invalid' 
     for a document as a whole, irrespective of detail or specifics.
     
     Schematron ../../../testing/xspec-assurance.sch can be used to validate
       are referenced files in place?
     
    -->

    <!-- NB this pattern is regular enough so the XSpec could be generated
     dynamically from a list of valid and invalid instances, or from directory listings. -->

    <x:variable name="mx:makes-reports" as="function(*)"
        select="function($d as node()) as xs:boolean { exists($d/descendant-or-self::mx:report) }"/>

    <x:scenario label="Reports are made for all files given as invalid">
        <x:scenario label="invalid1.xml">
            <x:context href="invalid/invalid1.xml" mode="validate"/>
            <x:expect label="appears not to be valid" test="$x:result => $mx:makes-reports()"/>
        </x:scenario>
        <x:scenario label="invalid2.xml">
            <x:context href="invalid/invalid2.xml" mode="validate"/>
            <x:expect label="appears not to be valid" test="$x:result => $mx:makes-reports()"/>
        </x:scenario>
        <x:scenario label="invalid3.xml">
            <x:context href="invalid/invalid3.xml" mode="validate"/>
            <x:expect label="appears not to be valid" test="$x:result => $mx:makes-reports()"/>
        </x:scenario>
        <x:scenario label="invalid4.xml">
            <x:context href="invalid/invalid4.xml" mode="validate"/>
            <x:expect label="appears not to be valid" test="$x:result => $mx:makes-reports()"/>
        </x:scenario>
        <x:scenario label="invalid5.xml">
            <x:context href="invalid/invalid5.xml" mode="validate"/>
            <x:expect label="appears not to be valid" test="$x:result => $mx:makes-reports()"/>
        </x:scenario>
        <x:scenario label="invalid6.xml">
            <x:context href="invalid/invalid6.xml" mode="validate"/>
            <x:expect label="appears not to be valid" test="$x:result => $mx:makes-reports()"/>
        </x:scenario>
        <x:scenario label="invalid7.xml">
            <x:context href="invalid/invalid7.xml" mode="validate"/>
            <x:expect label="appears not to be valid" test="$x:result => $mx:makes-reports()"/>
        </x:scenario>
        <x:scenario label="invalid8.xml">
            <x:context href="invalid/invalid8.xml" mode="validate"/>
            <x:expect label="appears not to be valid" test="$x:result => $mx:makes-reports()"/>
        </x:scenario>
        <x:scenario label="invalid9.xml">
            <x:context href="invalid/invalid9.xml" mode="validate"/>
            <x:expect label="appears not to be valid" test="$x:result => $mx:makes-reports()"/>
        </x:scenario>
    </x:scenario>

    <x:scenario label="No reports are made for any files given as valid">
        <x:scenario label="valid1.xml">
            <x:context href="valid/valid1.xml" select="/*" mode="validate"/>
            <x:expect label="appears to be valid" test="$x:result => $mx:makes-reports() => not()"/>
        </x:scenario>
        <x:scenario label="valid2.xml">
            <x:context href="valid/valid2.xml" select="/*" mode="validate"/>
            <x:expect label="appears to be valid" test="$x:result => $mx:makes-reports() => not()"/>
        </x:scenario>
        <x:scenario label="valid3.xml">
            <x:context href="valid/valid3.xml" select="/*" mode="validate"/>
            <x:expect label="appears to be valid" test="$x:result => $mx:makes-reports() => not()"/>
        </x:scenario>
    </x:scenario>

</x:description>
