<?xml version="1.0" encoding="UTF-8"?>
<METASCHEMA xmlns="http://csrc.nist.gov/ns/oscal/metaschema/1.0">
   <!--https://github.com/usnistgov/metaschema/blob/main/website/content/specification/computer-example.xml-->
    <schema-name>Computer Model</schema-name>
    <schema-version>0.0.5</schema-version>
    <short-name>computer</short-name>
    <namespace>http://example.com/ns/computer</namespace>
    <json-base-uri>http://example.com/ns/computer</json-base-uri>
   <remarks>
      <p>Derived from <a href="https://github.com/usnistgov/metaschema/blob/main/website/content/specification/computer-example.xml">Metaschema Repo Computer Example Metaschema</a> and modified for this demo.</p>
   </remarks>
    <define-assembly name="vendor">
        <formal-name>Vendor Information</formal-name>
        <description>Information about a vendor of a computer part.</description>
       <define-flag name="id" as-type="string" required="yes">
          <formal-name>Vendor Identifier</formal-name>
          <description>An identifier for classifying a unique computer parts vendor.</description>
       </define-flag>
       <model>
            <define-field name="name" min-occurs="1" max-occurs="1">
                <formal-name>Vendor Name</formal-name>
                <description>The registered company name of the vendor.</description>
            </define-field>
            <define-field name="address" min-occurs="1" max-occurs="1">
                <formal-name>Vendor Address</formal-name>
                <description>The physical address of an office location for the vendor.</description>
            </define-field>
            <define-field name="website" as-type="uri" min-occurs="1" max-occurs="1">
                <formal-name>Vendor Website</formal-name>
                <description>A public website made by the vendor documenting their parts as used in the computer.</description>
            </define-field>
        </model>
    </define-assembly>
   <define-flag name="date-of-manufacture" as-type="string">
      <formal-name>Date of manufacture</formal-name>
      <description>When the computer was manufactured.</description>
      
   </define-flag>
    <define-field name="product-name" as-type="string">
        <formal-name>Product Name</formal-name>
        <description>The product name from the vendor of the computer part.</description>
    </define-field>
    <define-assembly name="computer">
        <formal-name>Computer Assembly</formal-name>
        <description>A container object for a computer, its parts, and its sub-parts.</description>
        <root-name>computer</root-name>
       <flag ref="date-of-manufacture" required="no"/>
       <flag ref="serial-number"/>
       
       <define-flag name="id" as-type="string" required="yes">
            <formal-name>Computer Identifier</formal-name>
            <description>An identifier for classifying a unique make and model of computer.</description>
            <constraint>
               <matches regex="\i\c*" id="id-naming-rule_1">
                  <remarks>
                     <p>Must match pattern for XML name.</p>
                  </remarks>
               </matches>
            </constraint>
        </define-flag>
       
        <model>
            <define-assembly name="motherboard">
                <formal-name>Motherboard Assembly</formal-name>
                <description>A container object for a motherboard in a computer and its sub-parts.</description>
                <flag ref="serial-number"/>
                <model>
                    <assembly ref="vendor"/>
                    <define-field name="type" as-type="string" min-occurs="1" max-occurs="1">
                        <formal-name>Motherboard Type</formal-name>
                        <description>The type motherboard layout, <code>at</code>, <code>atx</code>, <code>mini-itx</code> or an alternative.</description>
                       <constraint>
                          <allowed-values target="." id="motherboard-type-rule_1">
                             <enum value="at">AT</enum>
                             <enum value="atx">ATX</enum>
                             <enum value="mini-itx">Mini-ITX</enum>
                             <enum value="custom">Custom</enum>
                          </allowed-values>
                       </constraint>
                    </define-field>
                    <define-assembly name="cpu">
                        <formal-name>Motherboard Central Processing Unit (CPU)</formal-name>
                        <description>The model number of the CPU on the motherboard of a computer.</description>
                        <model>
                            <assembly ref="vendor"/>
                            <field ref="product-name" min-occurs="1" max-occurs="1"/>
                            <define-field name="architecture" as-type="string" min-occurs="1" max-occurs="1">
                                <formal-name>CPU Architecture</formal-name>
                                <description>The Instruction Set Architecture (ISA) of the processor, <code>x86</code>, <code>x86-64</code>, <code>arm</code>, or an alternative.</description>
                            </define-field>
                            <define-field name="speed" as-type="string" min-occurs="1" max-occurs="1">
                                <formal-name>CPU Speed</formal-name>
                                <description>The clock speed of the CPU in megahertz or gigahertz.</description>
                               <constraint>
                                  <matches target="." regex="\d+(\.\d+)?(M|G)Hz" id="cpu-speed-rule_1"/>
                               </constraint>
                            </define-field>
                        </model>
                       
                    </define-assembly>
                    <define-assembly name="ata-socket">
                        <formal-name>Motherboard Advanced Technology Attachment (ATA) Socket</formal-name>
                        <description>The model number of ATA socket on the motherboard of a computer. There will only be one socket on any motherboard.</description>
                       <flag ref="serial-number"/>
                       <model>
                            <assembly ref="vendor"/>        
                            <field ref="product-name" min-occurs="1" max-occurs="1"/>
                            <define-field name="type" as-type="string" min-occurs="1" max-occurs="1">
                                <formal-name>ATA Socket Type</formal-name>
                                <description>The type of ATA socket on the motherboard , <code>pata</code> (parallel ATA), <code>sata</code> (Serial ATA), or an alternative.</description>
                            </define-field>
                        </model>
                       <constraint>
                          <allowed-values target="child::product-name" id="ata-socket-rule_1">
                             <enum value="Socketeer I">Socketeer I</enum>
                             <enum value="Socketeer II">Socketeer II</enum>
                             <enum value="LampSocket socket">LampSocket socket</enum>
                             <enum value="MiniSock Deux">MiniSock Deux</enum>
                             <enum value="SprocketSocket">SprocketSocket 1000</enum>
                             <enum value="[Unlisted Socket Product]">Unlisted</enum>
                          </allowed-values>
                          <allowed-values target="child::vendor/child::name" id="ata-socket-rule_2">
                             <enum value="Socketeer">Socketeer</enum>
                             <enum value="LampSocket">LampSocket</enum>
                             <enum value="MiniSock">MiniSock</enum>
                             <enum value="SprocketSocket">SprocketSocket</enum>
                             <enum value="[Unlisted Socket Vendor]">Unlisted</enum>
                          </allowed-values>
                          <allowed-values target="self::*[vendor/name='Socketeer']/product-name"  id="ata-socket-rule_3"><!-- here we have a co-occurrence constraint -->
                             <enum value="Socketeer I">Socketeer I</enum>
                             <enum value="Socketeer II">Socketeer II</enum>
                          </allowed-values>
                       </constraint>
                    </define-assembly>
                    <define-assembly name="memory" min-occurs="1" max-occurs="unbounded">
                        <formal-name>Motherboard Random Access Memory (RAM) Module(s)</formal-name>
                        <description>Random access memory hardware installed on the motherboard of a computer.</description>
                        <group-as name="memory-modules" in-json="ARRAY"/>
                       <flag ref="serial-number"/>
                       <model>
                            <assembly ref="vendor"/>
                            <field ref="product-name" min-occurs="1" max-occurs="1"/>
                            <define-field name="byte-size" as-type="positive-integer" min-occurs="1" max-occurs="1">
                                <formal-name>Memory Module Size</formal-name>
                                <description>Size of the memory module in binary, not SI base-10 units, meaning a kilobyte is 1024 bytes, not 1000 bytes.</description>
                               <constraint>
                                  <expect target="." test="(number(.) > 0) and not(. mod 256)" id="byte-size-test_1"/><!-- must be evenly divisible by 256 -->
                               </constraint>
                            </define-field>
                        </model>                       
                    </define-assembly>
                   <assembly ref="cooling" min-occurs="0"/>
                   <!--<assembly ref="monitor" min-occurs="0" max-occurs="4">
                      <group-as name="monitors" in-xml="GROUPED" in-json="ARRAY"/>
                   </assembly>-->
                   <define-assembly name="expansion-card" min-occurs="0" max-occurs="unbounded">
                        <formal-name>Motherboard Expansion Card</formal-name>
                        <description>The model number of an expansion card connected to the motherboard of a computer.</description>
                        <group-as name="expansion-cards" in-json="ARRAY"/>
                       <flag ref="serial-number"/>
                       <define-flag name="state">
                          <formal-name>Card state</formal-name>
                          <description>If tested or prepackaged, the state of an expansion card may be known.</description>
                          <constraint>
                             <allowed-values id="expansion-card-state-rule_1">
                                <enum value="new">New</enum>
                                <enum value="refurb">Refurb</enum>
                                <enum value="inoperative">Inoperative</enum>
                             </allowed-values>                             
                          </constraint>
                       </define-flag>
                        <model>
                            <assembly ref="vendor"/>
                            <field ref="product-name" min-occurs="1" max-occurs="1"/>
                            <define-field name="type" as-type="string" min-occurs="1" max-occurs="1">
                                <formal-name>Expansion Card Type</formal-name>
                               <description>The type of expansion card on a motherboard of a computer, such as <code>pci</code> (PCI, e.g. Peripheral Component Interconnect), <code>pcie</code> (PCI Express), or an alternative.</description>
                            </define-field>
                        </model>
                    </define-assembly>
                </model>
               <constraint>
                  <expect target="." test="not(memory/byte-size != memory/byte-size)" id="memory-rule_1"/>
                  <expect target="." test="not(count(memory) mod 2)" id="memory-rule_2"/><!-- there must be an even number of memory units-->
                  <has-cardinality target="memory" id="memory-rule_3" min-occurs="2" max-occurs="10"/>
               </constraint>
            </define-assembly>
        </model>
       <constraint>
          <allowed-values allow-other="yes" id="manufacture-date-rule_1" target="self::*[starts-with(@id,'April')]/@date-of-manufacture">
             <enum value="1980-04-01">Apr 1 1980</enum>
             <enum value="1981-04-01">Apr 1 1981</enum>
             <enum value="1982-04-01">Apr 1 1982</enum>
          </allowed-values>
          <expect id="manufacture-date-rule_2" target="@date-of-manufacture" test="not(. castable as xs:date) or (xs:date(.) >= xs:date('1950-01-01'))"/>
          <matches  id="manufacture-date-rule_3" target="@date-of-manufacture" datatype="date" level="WARNING" />
          <has-cardinality target="expansion-card" max-occurs="4" id="expansion-card-rule_1"/>
          <is-unique target="descendant::*[exists(@sn)]" id="unique-serial-numbers">
             <key-field target="@sn"/>
          </is-unique>
          <!--<index name="monitor-plugs" target=".//motherboard | .//expansion-card">
             <key-field target="@sn"/>
          </index>-->
       </constraint>
    </define-assembly>
    
    <define-flag name="serial-number">
       <formal-name>Serial Number</formal-name>
       <description>A code for this item only.</description>
       <use-name>sn</use-name>
    </define-flag>
   
    <define-assembly name="cooling">
        <formal-name>Cooling</formal-name>
        <description>How the computer cools itself.</description>
        <flag ref="serial-number"/>
        <model>
            <choice><!-- modeled as a choice here: multiple fans, or water. -->
                <define-assembly name="fan" min-occurs="2" max-occurs="12">
                    <formal-name>Fan</formal-name>
                   <description>A fan header for a single fan; at least two fans are required for adequate cooling.</description>                   
                </define-assembly>
                <define-assembly name="water" min-occurs="1" max-occurs="1">
                    <formal-name>Water</formal-name>
                    <description>A cooling system using water for thermal regulation.</description>                    
                    <define-flag name="illuminated" as-type="boolean">
                        <formal-name>Whether illuminated</formal-name>
                        <description>The water system is illuminated for visual effect.</description>
                    </define-flag>
                </define-assembly>
            </choice>
        </model>
    </define-assembly>
   
   <!--<define-assembly name="monitor">
      <formal-name>Motherboard Assembly</formal-name>
      <description>A container object for a motherboard in a computer and its sub-parts.</description>
      <flag ref="serial-number"/>
      <model>
         <assembly ref="vendor"/>
         <define-field name="model">
            <formal-name>Monitor Model</formal-name>
            <description>The monitor's model number or label.</description>
         </define-field>
         <define-assembly name="connection" max-occurs="4" min-occurs="1">
            <formal-name>Monitor connection</formal-name>
            <description>Describes the relation of a monitor with this computer. Only components on this computer should be listed as connections.</description>
            <group-as name="connections" in-json="ARRAY"/>
            <define-flag name="port-type" as-type="string">
               <formal-name>Type of port</formal-name>
               <description>Monitors come with any number of connector types.</description>
            </define-flag>
            <define-flag name="provider-SN">
               <formal-name>Provider serial number</formal-name>
               <description>Providing the monitor with its data feed.</description>
            </define-flag>
            <constraint>
               <index-has-key target="." name="monitor-plugs">
                  <key-field target="@provider-SN"/><!-\- monitor-plugs index lists components by SN to which monitors can be connected -\->
               </index-has-key>
            </constraint>
         </define-assembly>
      </model>
   </define-assembly>-->
   
</METASCHEMA>